<?php

namespace App\Model;

use App\Constants\Services;
use League\Fractal\Resource\Collection;
use Phalcon\Mvc\Model;

/**
 * Organization
 *
 * @package App\Model
 * @autogenerated by Phalcon Developer Tools
 * @date 2018-08-03, 17:43:27
 * @method Collection getDepartments
 * @method Collection getGroupReport
 * @method Collection getGroups
 * @method Collection getProcess
 * @method Collection getSurvey
 * @method Collection getSurveyTemplates
 * @method Collection getSystemicMap
 * @method Collection getSubscriptions
 * @method Collection getSystemicStructureMap
 * @method Collection getUserOrganization
 * @method User getUser
 */
class Organization extends Model
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(type="integer", length=11, nullable=false)
     */
    public $id;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=false)
     */
    public $name;

    /**
     *
     * @var string
     * @Column(type="string", nullable=false)
     */
    public $description;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=false)
     */
    public $userId;

    /**
     * Initialize method for model.
     */
    public function initialize(): void
    {
        $this->setSchema($this->getDI()->get(Services::CONFIG)->database->dbname);
        $this->setSource('organization');
        $this->hasMany('id', Department::class, 'organization_id', ['alias' => 'Departments']);
        $this->hasMany('id', GroupReport::class, 'organization_id', ['alias' => 'GroupReport']);
        $this->hasMany('id', Group::class, 'organization', ['alias' => 'Groups']);
        $this->hasMany('id', Process::class, 'organizationId', ['alias' => 'Process']);
        $this->hasMany('id', Survey::class, 'organization_id', ['alias' => 'Survey']);
        $this->hasMany('id', SurveyTemplate::class, 'organization_id', ['alias' => 'SurveyTemplates']);
        $this->hasMany('id', Subscriptions::class, 'organization_id', ['alias' => 'Subscriptions']);
        $this->hasMany('id', SystemicMap::class, 'organization', ['alias' => 'SystemicMap']);
        $this->hasMany('id', SystemicStructureMap::class, 'organization', ['alias' => 'SystemicStructureMap']);
        $this->hasMany('id', UserOrganization::class, 'organization_id', ['alias' => 'UserOrganization']);
        $this->belongsTo('userId', User::class, 'id', ['alias' => 'User']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource(): string
    {
        return 'organization';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Organization[]|Organization|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Organization|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap(): array
    {
        return [
            'id' => 'id',
            'name' => 'name',
            'description' => 'description',
            'userId' => 'userId'
        ];
    }
}
